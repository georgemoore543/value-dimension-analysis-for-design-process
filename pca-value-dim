import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import os
from typing import List, Tuple

class ValueDimensionPCAGui:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("PCA Analysis File Selection")
        self.root.geometry("800x600")
        
        self.ratings_paths = []
        self.dims_paths = []
        
        self.create_widgets()
        
    def create_widgets(self):
        # File count frame
        count_frame = ttk.LabelFrame(self.root, text="Number of Files", padding="10")
        count_frame.pack(fill="x", padx=10, pady=5)
        
        # Ratings count
        ttk.Label(count_frame, text="Number of ratings spreadsheets:").grid(row=0, column=0, padx=5, pady=5)
        self.ratings_count = ttk.Spinbox(count_frame, from_=1, to=10, width=5)
        self.ratings_count.grid(row=0, column=1, padx=5, pady=5)
        
        # Dimensions count
        ttk.Label(count_frame, text="Number of dimension spreadsheets:").grid(row=1, column=0, padx=5, pady=5)
        self.dims_count = ttk.Spinbox(count_frame, from_=1, to=10, width=5)
        self.dims_count.grid(row=1, column=1, padx=5, pady=5)
        
        # Button to proceed to file selection
        ttk.Button(count_frame, text="Set File Count", command=self.setup_file_selection).grid(row=2, column=0, columnspan=2, pady=10)
        
        # File selection frames
        self.files_frame = ttk.Frame(self.root)
        self.files_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Summary text
        self.summary_text = tk.Text(self.root, height=10, width=80)
        self.summary_text.pack(padx=10, pady=5)
        
        # Proceed button (initially disabled)
        self.proceed_button = ttk.Button(self.root, text="Proceed with Analysis", command=self.proceed, state="disabled")
        self.proceed_button.pack(pady=10)
        
    def setup_file_selection(self):
        # Clear previous file selection widgets
        for widget in self.files_frame.winfo_children():
            widget.destroy()
        
        self.ratings_paths = []
        self.dims_paths = []
        
        # Create ratings file selection
        ratings_frame = ttk.LabelFrame(self.files_frame, text="Ratings Spreadsheets", padding="10")
        ratings_frame.pack(fill="x", pady=5)
        
        for i in range(int(self.ratings_count.get())):
            self.create_file_selector(ratings_frame, f"Ratings file {i+1}", "ratings", i)
        
        # Create dimensions file selection
        dims_frame = ttk.LabelFrame(self.files_frame, text="Dimensions Spreadsheets", padding="10")
        dims_frame.pack(fill="x", pady=5)
        
        for i in range(int(self.dims_count.get())):
            self.create_file_selector(dims_frame, f"Dimensions file {i+1}", "dims", i)
    
    def create_file_selector(self, parent, label, file_type, index):
        frame = ttk.Frame(parent)
        frame.pack(fill="x", pady=2)
        
        ttk.Label(frame, text=label).pack(side="left", padx=5)
        path_var = tk.StringVar()
        path_entry = ttk.Entry(frame, textvariable=path_var, width=50)
        path_entry.pack(side="left", padx=5)
        
        def browse():
            filename = filedialog.askopenfilename(
                filetypes=[("Excel files", "*.xlsx *.xls")]
            )
            if filename:
                path_var.set(filename)
                self.verify_and_update_file(filename, file_type, index)
        
        ttk.Button(frame, text="Browse", command=browse).pack(side="left", padx=5)
    
    def verify_and_update_file(self, path, file_type, index):
        try:
            # Verify file can be read
            df = pd.read_excel(path)
            
            # Store path in appropriate list
            if file_type == "ratings":
                if len(self.ratings_paths) <= index:
                    self.ratings_paths.append(path)
                else:
                    self.ratings_paths[index] = path
            else:
                if len(self.dims_paths) <= index:
                    self.dims_paths.append(path)
                else:
                    self.dims_paths[index] = path
            
            self.update_summary()
            
        except Exception as e:
            messagebox.showerror("Error", f"Could not read file: {str(e)}")
    
    def update_summary(self):
        self.summary_text.delete(1.0, tk.END)
        self.summary_text.insert(tk.END, "=== Selected Files Summary ===\n\n")
        
        # Show ratings files
        self.summary_text.insert(tk.END, "Ratings Spreadsheets:\n")
        for i, path in enumerate(self.ratings_paths, 1):
            if os.path.exists(path):
                size = os.path.getsize(path) / (1024 * 1024)  # Convert to MB
                df = pd.read_excel(path)
                self.summary_text.insert(tk.END, 
                    f"{i}. {os.path.basename(path)} ({size:.2f} MB)\n"
                    f"   Columns: {', '.join(df.columns)}\n"
                    f"   Rows: {len(df)}\n\n"
                )
        
        # Show dimensions files
        self.summary_text.insert(tk.END, "Dimensions Spreadsheets:\n")
        for i, path in enumerate(self.dims_paths, 1):
            if os.path.exists(path):
                size = os.path.getsize(path) / (1024 * 1024)  # Convert to MB
                df = pd.read_excel(path)
                self.summary_text.insert(tk.END, 
                    f"{i}. {os.path.basename(path)} ({size:.2f} MB)\n"
                    f"   Columns: {', '.join(df.columns)}\n"
                    f"   Rows: {len(df)}\n\n"
                )
        
        # Enable proceed button if all files are selected
        expected_total = int(self.ratings_count.get()) + int(self.dims_count.get())
        actual_total = len(self.ratings_paths) + len(self.dims_paths)
        self.proceed_button['state'] = 'normal' if actual_total == expected_total else 'disabled'
    
    def proceed(self):
        # Here you would typically initialize your PCA analysis
        pca = ValueDimensionPCA()
        try:
            pca.load_data(self.ratings_paths, self.dims_paths)
            messagebox.showinfo("Success", "Data loaded successfully!")
            self.root.destroy()  # Close the GUI
        except Exception as e:
            messagebox.showerror("Error", f"Error loading data: {str(e)}")
    
    def run(self):
        self.root.mainloop()
